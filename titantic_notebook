{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.8"
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Load data"
      ],
      "metadata": {
        "id": "M3Z_3-_daKxJ"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Kx6zoLVxPmax"
      },
      "source": [
        "import csv\n",
        "import random\n",
        "from sklearn.neural_network import MLPClassifier\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "import pandas as pd\n",
        "import numpy as np"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FSa0KFHRPz3M"
      },
      "source": [
        "Obtain Titanic passenger data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "c7dokpKs6hnA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "328789fb-20db-4c5f-d035-5a209717b323"
      },
      "source": [
        "!wget https://github.com/mlittmancs/great_courses_ml/raw/master/data/ship.csv"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--2022-09-03 19:10:16--  https://github.com/mlittmancs/great_courses_ml/raw/master/data/ship.csv\n",
            "Resolving github.com (github.com)... 20.27.177.113\n",
            "Connecting to github.com (github.com)|20.27.177.113|:443... connected.\n",
            "HTTP request sent, awaiting response... 302 Found\n",
            "Location: https://raw.githubusercontent.com/mlittmancs/great_courses_ml/master/data/ship.csv [following]\n",
            "--2022-09-03 19:10:17--  https://raw.githubusercontent.com/mlittmancs/great_courses_ml/master/data/ship.csv\n",
            "Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.111.133, 185.199.108.133, 185.199.109.133, ...\n",
            "Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.111.133|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 61194 (60K) [text/plain]\n",
            "Saving to: ‘ship.csv’\n",
            "\n",
            "ship.csv            100%[===================>]  59.76K  --.-KB/s    in 0.01s   \n",
            "\n",
            "2022-09-03 19:10:17 (4.07 MB/s) - ‘ship.csv’ saved [61194/61194]\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wstPtP6MP2f3"
      },
      "source": [
        "Process csv file, import into Python"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gSKpcO_GAwEX"
      },
      "source": [
        "first = True\n",
        "with open(\"ship.csv\") as f:\n",
        "    csvdata = csv.reader(f, delimiter=',')\n",
        "    data = []\n",
        "    for row in csvdata:\n",
        "      if not first: data += [row]\n",
        "      first = False\n",
        "\n",
        "array = []\n",
        "for col in range(len(data[0])):\n",
        "  array += [{}]\n",
        "  new = 0\n",
        "  for i in range(len(data)):\t\n",
        "     line = data[i]\t\t\n",
        "     if line[col] not in array[col]:\n",
        "      array[col][line[col]] = new\n",
        "      new += 1  \n",
        "alldat = []\n",
        "alllabs = []\n",
        "for line in data:\n",
        "  alllabs += [int(line[1])]\n",
        "  if line[5] == '': line[5] = '50'\n",
        "  alldat += [ [int(line[2]), array[4][line[4]], float(line[5]), int(line[6]), int(line[7]), float(line[9]), line[11]=='S', line[11]=='C', line[11]=='Q' ]]\n",
        "feats = ['Pclass','Sex','Age','SibSp','Parch','Fare', 'Embarked S', 'Embarked C', 'Embarked Q']"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JoDHyFJqQOYG"
      },
      "source": [
        "Random sorting of data into testing and training data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ofqb0JywAwHq"
      },
      "source": [
        "trainmask = [random.randint(0,2) for i in range(len(alldat))]\n",
        "\n",
        "traindat = [alldat[i] for i in range(len(alldat)) if trainmask[i]<2]\n",
        "trainlabs = [alllabs[i] for i in range(len(alldat)) if trainmask[i]<2]\n",
        "testdat = [alldat[i] for i in range(len(alldat)) if trainmask[i]==2]\n",
        "testlabs = [alllabs[i] for i in range(len(alldat)) if trainmask[i]==2]"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# load test data into df\n",
        "testdat = pd.DataFrame(testdat, columns = feats)\n",
        "testdat['log_Fare'] = np.where(testdat['Fare']>0, np.log(testdat['Fare']), 0)\n",
        "testdat"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "DPAiQB-DO6NK",
        "outputId": "c4dc5cb0-8d98-434d-aae6-a2d45bb16eea"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/pandas/core/arraylike.py:364: RuntimeWarning: divide by zero encountered in log\n",
            "  result = getattr(ufunc, method)(*inputs, **kwargs)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Pclass  Sex   Age  SibSp  Parch     Fare  Embarked S  Embarked C  \\\n",
              "0         3    1  26.0      0      0   7.9250        True       False   \n",
              "1         3    0  50.0      0      0   8.4583       False       False   \n",
              "2         1    1  58.0      0      0  26.5500        True       False   \n",
              "3         3    0  39.0      1      5  31.2750        True       False   \n",
              "4         2    0  50.0      0      0  13.0000        True       False   \n",
              "..      ...  ...   ...    ...    ...      ...         ...         ...   \n",
              "297       3    0  25.0      0      0   7.0500        True       False   \n",
              "298       3    1  39.0      0      5  29.1250       False       False   \n",
              "299       2    0  27.0      0      0  13.0000        True       False   \n",
              "300       1    1  19.0      0      0  30.0000        True       False   \n",
              "301       3    1  50.0      1      2  23.4500        True       False   \n",
              "\n",
              "     Embarked Q  log_Fare  \n",
              "0         False  2.070022  \n",
              "1          True  2.135148  \n",
              "2         False  3.279030  \n",
              "3         False  3.442819  \n",
              "4         False  2.564949  \n",
              "..          ...       ...  \n",
              "297       False  1.953028  \n",
              "298        True  3.371597  \n",
              "299       False  2.564949  \n",
              "300       False  3.401197  \n",
              "301       False  3.154870  \n",
              "\n",
              "[302 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-169ad767-fe3d-42c0-9929-9ab1bb2312cd\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Embarked S</th>\n",
              "      <th>Embarked C</th>\n",
              "      <th>Embarked Q</th>\n",
              "      <th>log_Fare</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>2.070022</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>50.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.4583</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>2.135148</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>58.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>26.5500</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>3.279030</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>39.0</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>31.2750</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>3.442819</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>50.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>13.0000</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>2.564949</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>297</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7.0500</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>1.953028</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>298</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>39.0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>29.1250</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>3.371597</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>299</th>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>13.0000</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>2.564949</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>300</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>19.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>30.0000</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>3.401197</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>301</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>50.0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>23.4500</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>3.154870</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>302 rows × 10 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-169ad767-fe3d-42c0-9929-9ab1bb2312cd')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-169ad767-fe3d-42c0-9929-9ab1bb2312cd button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-169ad767-fe3d-42c0-9929-9ab1bb2312cd');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Review data"
      ],
      "metadata": {
        "id": "Y2BltMInnfAl"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Review the data relationships and make initial observations on trends and potential correlations. "
      ],
      "metadata": {
        "id": "s7lOyFRda4ut"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "traindat_df = pd.DataFrame(traindat, columns = feats) # convert list to pd dataframe\n",
        "trainlabs_df = pd.DataFrame(trainlabs, columns = ['Survived'])\n",
        "traincombined_df = traindat_df.join(trainlabs_df) # combine into one dataframe for initial review\n",
        "traincombined_df"
      ],
      "metadata": {
        "id": "TaYbROj8a_tq",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "a1179651-5b6c-408a-9ca6-5312271ef031"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Pclass  Sex   Age  SibSp  Parch     Fare  Embarked S  Embarked C  \\\n",
              "0         3    0  22.0      1      0   7.2500        True       False   \n",
              "1         1    1  38.0      1      0  71.2833       False        True   \n",
              "2         1    1  35.0      1      0  53.1000        True       False   \n",
              "3         3    0  35.0      0      0   8.0500        True       False   \n",
              "4         1    0  54.0      0      0  51.8625        True       False   \n",
              "..      ...  ...   ...    ...    ...      ...         ...         ...   \n",
              "584       2    1  25.0      0      1  26.0000        True       False   \n",
              "585       3    0  33.0      0      0   7.8958        True       False   \n",
              "586       2    0  28.0      0      0  10.5000        True       False   \n",
              "587       1    0  26.0      0      0  30.0000       False        True   \n",
              "588       3    0  32.0      0      0   7.7500       False       False   \n",
              "\n",
              "     Embarked Q  Survived  \n",
              "0         False         0  \n",
              "1         False         1  \n",
              "2         False         1  \n",
              "3         False         0  \n",
              "4         False         0  \n",
              "..          ...       ...  \n",
              "584       False         1  \n",
              "585       False         0  \n",
              "586       False         0  \n",
              "587       False         1  \n",
              "588        True         0  \n",
              "\n",
              "[589 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0255fd57-a857-4127-92d2-f9ecdfcaaa12\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Embarked S</th>\n",
              "      <th>Embarked C</th>\n",
              "      <th>Embarked Q</th>\n",
              "      <th>Survived</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>54.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>51.8625</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>584</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>25.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>26.0000</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>585</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>33.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7.8958</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>586</th>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>28.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10.5000</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>587</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>30.0000</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>588</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>32.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7.7500</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>589 rows × 10 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0255fd57-a857-4127-92d2-f9ecdfcaaa12')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-0255fd57-a857-4127-92d2-f9ecdfcaaa12 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-0255fd57-a857-4127-92d2-f9ecdfcaaa12');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "traincombined_df.info()"
      ],
      "metadata": {
        "id": "5FUEpyUbn20k",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ca3216bf-51ec-4a69-da27-c782354d4fe9"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 589 entries, 0 to 588\n",
            "Data columns (total 10 columns):\n",
            " #   Column      Non-Null Count  Dtype  \n",
            "---  ------      --------------  -----  \n",
            " 0   Pclass      589 non-null    int64  \n",
            " 1   Sex         589 non-null    int64  \n",
            " 2   Age         589 non-null    float64\n",
            " 3   SibSp       589 non-null    int64  \n",
            " 4   Parch       589 non-null    int64  \n",
            " 5   Fare        589 non-null    float64\n",
            " 6   Embarked S  589 non-null    bool   \n",
            " 7   Embarked C  589 non-null    bool   \n",
            " 8   Embarked Q  589 non-null    bool   \n",
            " 9   Survived    589 non-null    int64  \n",
            "dtypes: bool(3), float64(2), int64(5)\n",
            "memory usage: 34.1 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# summary/descriptive statistics\n",
        "traincombined_df.describe()"
      ],
      "metadata": {
        "id": "oaTmM_5noLx5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "outputId": "66a7eb48-5eaa-4d37-c148-60d62eb8010c"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Pclass         Sex         Age       SibSp       Parch        Fare  \\\n",
              "count  589.000000  589.000000  589.000000  589.000000  589.000000  589.000000   \n",
              "mean     2.329372    0.363328   33.540747    0.512733    0.380306   32.640768   \n",
              "std      0.837170    0.481367   15.078691    1.104378    0.796262   51.362766   \n",
              "min      1.000000    0.000000    0.670000    0.000000    0.000000    0.000000   \n",
              "25%      2.000000    0.000000   22.000000    0.000000    0.000000    7.925000   \n",
              "50%      3.000000    0.000000   32.000000    0.000000    0.000000   14.458300   \n",
              "75%      3.000000    1.000000   50.000000    1.000000    0.000000   31.275000   \n",
              "max      3.000000    1.000000   80.000000    8.000000    5.000000  512.329200   \n",
              "\n",
              "         Survived  \n",
              "count  589.000000  \n",
              "mean     0.388795  \n",
              "std      0.487891  \n",
              "min      0.000000  \n",
              "25%      0.000000  \n",
              "50%      0.000000  \n",
              "75%      1.000000  \n",
              "max      1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ad46d9b1-1fff-4fcc-aecf-3d22a9784787\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Survived</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>589.000000</td>\n",
              "      <td>589.000000</td>\n",
              "      <td>589.000000</td>\n",
              "      <td>589.000000</td>\n",
              "      <td>589.000000</td>\n",
              "      <td>589.000000</td>\n",
              "      <td>589.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>2.329372</td>\n",
              "      <td>0.363328</td>\n",
              "      <td>33.540747</td>\n",
              "      <td>0.512733</td>\n",
              "      <td>0.380306</td>\n",
              "      <td>32.640768</td>\n",
              "      <td>0.388795</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.837170</td>\n",
              "      <td>0.481367</td>\n",
              "      <td>15.078691</td>\n",
              "      <td>1.104378</td>\n",
              "      <td>0.796262</td>\n",
              "      <td>51.362766</td>\n",
              "      <td>0.487891</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.670000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>22.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>7.925000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>14.458300</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>31.275000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>80.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>512.329200</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ad46d9b1-1fff-4fcc-aecf-3d22a9784787')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ad46d9b1-1fff-4fcc-aecf-3d22a9784787 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ad46d9b1-1fff-4fcc-aecf-3d22a9784787');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "It's important to visualize the data to observe trends. Here, we start with a standard histogram of each of the attributes to better understand the data. Is it numerical or categorical? Is it discrete or continuous? Is the data normally distributed or not?"
      ],
      "metadata": {
        "id": "oXq6l6yCqO9K"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%matplotlib inline\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "traincombined_df.hist(bins=20, figsize = (20,15))"
      ],
      "metadata": {
        "id": "3QtQBC_tojtU",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "89f1e993-ff1e-4fbd-f7b0-bbee63a7de58"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7efd5b51d610>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7efd5b51d910>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7efd5b476e10>],\n",
              "       [<matplotlib.axes._subplots.AxesSubplot object at 0x7efd5b43a450>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7efd5b3efa50>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7efd5b426f90>],\n",
              "       [<matplotlib.axes._subplots.AxesSubplot object at 0x7efd5b36c5d0>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7efd5b3a0bd0>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7efd5b358f50>]],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 10
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x1080 with 9 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "It looks like age is the only candidate for normal distribution, although there are some strange things happening toward the tail end of the data. Fare, Parch, SibSp look skewed. Remaining look like categorical data that has been converted to numbers.\n",
        "\n",
        "Next, let's look at a linear correlation matrix to see if there are clear linear trends between the attributes."
      ],
      "metadata": {
        "id": "OKHQjoP8qkJ3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# look for correlations. function only comes back with if there is linear correlation.\n",
        "pd.options.display.max_columns = 10 # print all columns of matrix.\n",
        "corr_matrix = traincombined_df.corr()\n",
        "print(corr_matrix)"
      ],
      "metadata": {
        "id": "DoYMzxLCpqpW",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fc3c7c73-5f85-4583-8157-0f500a233e6b"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              Pclass       Sex       Age     SibSp     Parch      Fare  \\\n",
            "Pclass      1.000000 -0.115995 -0.151979  0.067195 -0.012193 -0.558554   \n",
            "Sex        -0.115995  1.000000 -0.106133  0.125645  0.246763  0.179920   \n",
            "Age        -0.151979 -0.106133  1.000000 -0.131528 -0.186601  0.023047   \n",
            "SibSp       0.067195  0.125645 -0.131528  1.000000  0.394815  0.167832   \n",
            "Parch      -0.012193  0.246763 -0.186601  0.394815  1.000000  0.226164   \n",
            "Fare       -0.558554  0.179920  0.023047  0.167832  0.226164  1.000000   \n",
            "Embarked S  0.065801 -0.121726 -0.155801  0.063446  0.081485 -0.136866   \n",
            "Embarked C -0.222449  0.080498  0.058968 -0.067282 -0.020666  0.232205   \n",
            "Embarked Q  0.222343  0.073884  0.156659 -0.003515 -0.099652 -0.116963   \n",
            "Survived   -0.355695  0.512678 -0.114391 -0.023407  0.082782  0.261940   \n",
            "\n",
            "            Embarked S  Embarked C  Embarked Q  Survived  \n",
            "Pclass        0.065801   -0.222449    0.222343 -0.355695  \n",
            "Sex          -0.121726    0.080498    0.073884  0.512678  \n",
            "Age          -0.155801    0.058968    0.156659 -0.114391  \n",
            "SibSp         0.063446   -0.067282   -0.003515 -0.023407  \n",
            "Parch         0.081485   -0.020666   -0.099652  0.082782  \n",
            "Fare         -0.136866    0.232205   -0.116963  0.261940  \n",
            "Embarked S    1.000000   -0.789063   -0.480144 -0.133158  \n",
            "Embarked C   -0.789063    1.000000   -0.152448  0.157691  \n",
            "Embarked Q   -0.480144   -0.152448    1.000000 -0.017991  \n",
            "Survived     -0.133158    0.157691   -0.017991  1.000000  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "corr_matrix['Survived'].sort_values(ascending=False)"
      ],
      "metadata": {
        "id": "ph7GF802qXKF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "65b4e8c5-1aa8-457b-9e1d-6e56ecab94ae"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Survived      1.000000\n",
              "Sex           0.512678\n",
              "Fare          0.261940\n",
              "Embarked C    0.157691\n",
              "Parch         0.082782\n",
              "Embarked Q   -0.017991\n",
              "SibSp        -0.023407\n",
              "Age          -0.114391\n",
              "Embarked S   -0.133158\n",
              "Pclass       -0.355695\n",
              "Name: Survived, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Question about the data, why are there so many 50 year olds? Is this an estimate age or were there truly that many 50 year olds present on the titanic? \n",
        "\n",
        "Maybe we should consider editing or adjust that to see if the otherwise normal distribution on age as an imapct?\n",
        "\n",
        "We also have a skewed distribution for fare (which is a smoother function for class). We should perform a log transformation on that to get more normally distributed data and reassess if the log of the attribute brings out any linear correlations."
      ],
      "metadata": {
        "id": "ng-gjL74BpFt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# log transofrmation for fare\n",
        "import numpy as np\n",
        "\n",
        "traincombined_df['log_Fare'] = np.where(traincombined_df['Fare']>0, \n",
        "                                        np.log(traincombined_df['Fare']), 0)  #ignore 0 values \n",
        "traincombined_df['log_Fare'].hist(bins=20, figsize = (25,15))\n",
        "\n",
        "corr_matrix = traincombined_df.corr()\n",
        "corr_matrix['Survived']"
      ],
      "metadata": {
        "id": "oGAIA0pqCb32",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "b3568d55-a201-453c-a592-e2c44392a41c"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/pandas/core/arraylike.py:364: RuntimeWarning: divide by zero encountered in log\n",
            "  result = getattr(ufunc, method)(*inputs, **kwargs)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Pclass       -0.355695\n",
              "Sex           0.512678\n",
              "Age          -0.114391\n",
              "SibSp        -0.023407\n",
              "Parch         0.082782\n",
              "Fare          0.261940\n",
              "Embarked S   -0.133158\n",
              "Embarked C    0.157691\n",
              "Embarked Q   -0.017991\n",
              "Survived      1.000000\n",
              "log_Fare      0.350690\n",
              "Name: Survived, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 13
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1800x1080 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# drop labels\n",
        "traindat_df = traincombined_df.drop(columns=[\"Survived\"])\n",
        "feats = ['Pclass','Sex','Age','SibSp','Parch','Fare', 'Embarked S', 'Embarked C', 'Embarked Q','log_Fare']"
      ],
      "metadata": {
        "id": "wcj0Re4OJ-Wf"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Decision Tree"
      ],
      "metadata": {
        "id": "cp3kFmBoJUDR"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "We'll start with a simple ML decision tree to see if any clear classifications can sort the bulk of the data. "
      ],
      "metadata": {
        "id": "dumgGNIUsJng"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import tree\n",
        "import graphviz \n",
        "\n",
        "clf = tree.DecisionTreeClassifier(max_leaf_nodes = 3)\t\n",
        "clf = clf.fit(traindat_df, trainlabs_df)\n",
        "\n",
        "score_train = clf.score(traindat_df,trainlabs_df) # accuracy\n",
        "score_test = clf.score(testdat, testlabs)\n",
        "print(\"accuracy of decision tree for training data is:\", score_train)\n",
        "print(\"accuracy of decision tree for testing data is:\", score_test)\n",
        "\n",
        "dot_data = tree.export_graphviz(clf, feature_names=feats,\n",
        "                      filled=True, rounded=True) \n",
        "graph = graphviz.Source(dot_data)\t\n",
        "graph\t"
      ],
      "metadata": {
        "id": "sgMweG-hJV6b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 415
        },
        "outputId": "32f6df18-db1d-4255-9d4e-914a4596199d"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "accuracy of decision tree for training data is: 0.7775891341256367\n",
            "accuracy of decision tree for testing data is: 0.804635761589404\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<graphviz.files.Source at 0x7efd5a7bbb10>"
            ],
            "image/svg+xml": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.40.1 (20161225.0304)\n -->\n<!-- Title: Tree Pages: 1 -->\n<svg width=\"337pt\" height=\"269pt\"\n viewBox=\"0.00 0.00 337.00 269.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 265)\">\n<title>Tree</title>\n<polygon fill=\"#ffffff\" stroke=\"transparent\" points=\"-4,4 -4,-265 333,-265 333,4 -4,4\"/>\n<!-- 0 -->\n<g id=\"node1\" class=\"node\">\n<title>0</title>\n<path fill=\"#f6d1b7\" stroke=\"#000000\" d=\"M187,-261C187,-261 79,-261 79,-261 73,-261 67,-255 67,-249 67,-249 67,-205 67,-205 67,-199 73,-193 79,-193 79,-193 187,-193 187,-193 193,-193 199,-199 199,-205 199,-205 199,-249 199,-249 199,-255 193,-261 187,-261\"/>\n<text text-anchor=\"middle\" x=\"133\" y=\"-245.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">Sex &lt;= 0.5</text>\n<text text-anchor=\"middle\" x=\"133\" y=\"-230.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.475</text>\n<text text-anchor=\"middle\" x=\"133\" y=\"-215.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 589</text>\n<text text-anchor=\"middle\" x=\"133\" y=\"-200.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [360, 229]</text>\n</g>\n<!-- 1 -->\n<g id=\"node2\" class=\"node\">\n<title>1</title>\n<path fill=\"#eca06a\" stroke=\"#000000\" d=\"M112,-149.5C112,-149.5 12,-149.5 12,-149.5 6,-149.5 0,-143.5 0,-137.5 0,-137.5 0,-108.5 0,-108.5 0,-102.5 6,-96.5 12,-96.5 12,-96.5 112,-96.5 112,-96.5 118,-96.5 124,-102.5 124,-108.5 124,-108.5 124,-137.5 124,-137.5 124,-143.5 118,-149.5 112,-149.5\"/>\n<text text-anchor=\"middle\" x=\"62\" y=\"-134.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.32</text>\n<text text-anchor=\"middle\" x=\"62\" y=\"-119.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 375</text>\n<text text-anchor=\"middle\" x=\"62\" y=\"-104.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [300, 75]</text>\n</g>\n<!-- 0&#45;&gt;1 -->\n<g id=\"edge1\" class=\"edge\">\n<title>0&#45;&gt;1</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M109.7519,-192.9465C102.0818,-181.7113 93.5418,-169.2021 85.8289,-157.9043\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"88.6491,-155.8277 80.1201,-149.5422 82.8678,-159.7745 88.6491,-155.8277\"/>\n<text text-anchor=\"middle\" x=\"75.4875\" y=\"-170.4092\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">True</text>\n</g>\n<!-- 2 -->\n<g id=\"node3\" class=\"node\">\n<title>2</title>\n<path fill=\"#86c3ef\" stroke=\"#000000\" d=\"M254,-157C254,-157 154,-157 154,-157 148,-157 142,-151 142,-145 142,-145 142,-101 142,-101 142,-95 148,-89 154,-89 154,-89 254,-89 254,-89 260,-89 266,-95 266,-101 266,-101 266,-145 266,-145 266,-151 260,-157 254,-157\"/>\n<text text-anchor=\"middle\" x=\"204\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">Pclass &lt;= 2.5</text>\n<text text-anchor=\"middle\" x=\"204\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.404</text>\n<text text-anchor=\"middle\" x=\"204\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 214</text>\n<text text-anchor=\"middle\" x=\"204\" y=\"-96.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [60, 154]</text>\n</g>\n<!-- 0&#45;&gt;2 -->\n<g id=\"edge2\" class=\"edge\">\n<title>0&#45;&gt;2</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M156.2481,-192.9465C162.255,-184.1475 168.7955,-174.5672 175.0543,-165.3993\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"177.952,-167.3623 180.6997,-157.13 172.1707,-163.4155 177.952,-167.3623\"/>\n<text text-anchor=\"middle\" x=\"185.3324\" y=\"-177.997\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">False</text>\n</g>\n<!-- 3 -->\n<g id=\"node4\" class=\"node\">\n<title>3</title>\n<path fill=\"#44a3e6\" stroke=\"#000000\" d=\"M183,-53C183,-53 91,-53 91,-53 85,-53 79,-47 79,-41 79,-41 79,-12 79,-12 79,-6 85,0 91,0 91,0 183,0 183,0 189,0 195,-6 195,-12 195,-12 195,-41 195,-41 195,-47 189,-53 183,-53\"/>\n<text text-anchor=\"middle\" x=\"137\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.103</text>\n<text text-anchor=\"middle\" x=\"137\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 110</text>\n<text text-anchor=\"middle\" x=\"137\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [6, 104]</text>\n</g>\n<!-- 2&#45;&gt;3 -->\n<g id=\"edge3\" class=\"edge\">\n<title>2&#45;&gt;3</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M180.3783,-88.9777C174.2113,-80.0954 167.5539,-70.5067 161.3499,-61.5711\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"164.1497,-59.4666 155.5715,-53.2485 158.3997,-63.4589 164.1497,-59.4666\"/>\n</g>\n<!-- 4 -->\n<g id=\"node5\" class=\"node\">\n<title>4</title>\n<path fill=\"#fdf6f0\" stroke=\"#000000\" d=\"M317,-53C317,-53 225,-53 225,-53 219,-53 213,-47 213,-41 213,-41 213,-12 213,-12 213,-6 219,0 225,0 225,0 317,0 317,0 323,0 329,-6 329,-12 329,-12 329,-41 329,-41 329,-47 323,-53 317,-53\"/>\n<text text-anchor=\"middle\" x=\"271\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.499</text>\n<text text-anchor=\"middle\" x=\"271\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 104</text>\n<text text-anchor=\"middle\" x=\"271\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [54, 50]</text>\n</g>\n<!-- 2&#45;&gt;4 -->\n<g id=\"edge4\" class=\"edge\">\n<title>2&#45;&gt;4</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M227.6217,-88.9777C233.7887,-80.0954 240.4461,-70.5067 246.6501,-61.5711\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"249.6003,-63.4589 252.4285,-53.2485 243.8503,-59.4666 249.6003,-63.4589\"/>\n</g>\n</g>\n</svg>\n"
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Looks like Sex and Pclass are the most important attributes in determining survival of the passenger. ~78% of the classification can be defined by these two attribtues. We can increase the max node leaves, but it doesn't add a lot of value. This just leads to overfitting. "
      ],
      "metadata": {
        "id": "JnFXs9DGsUMs"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# MLP Model"
      ],
      "metadata": {
        "id": "fNXksULYRIRc"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's try a simple multilayer perceptron NN and display the accuracy."
      ],
      "metadata": {
        "id": "m14R25HZvUzd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "nhidden = 60\n",
        "clf = MLPClassifier(hidden_layer_sizes=[nhidden], max_iter = 50000)\n",
        "clf = clf.fit(traindat_df, trainlabs_df)\n",
        "pred = clf.predict(testdat)\n",
        "[sum([pred[i] != testlabs[i] for i in range(len(testlabs))]) / len(testlabs)]\n"
      ],
      "metadata": {
        "id": "bkmg-UUXRJjo",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6198f8d3-1374-49a6-c17e-45ee56dcd465"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:1109: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.17549668874172186]"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Logistic regression"
      ],
      "metadata": {
        "id": "1ullGXHGaTqN"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YRBZGqvJa9Y9"
      },
      "source": [
        "Next, let's try logistic regression.\n",
        "\n",
        "Logistic regression is a one-layer neural network equivalent to signmoid activation. Basically multivariate model. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Hc9aJadgAwPe",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1686922c-d804-4d33-db22-cb266b0e7873"
      },
      "source": [
        "clf = LogisticRegression(max_iter = 50000)\n",
        "\n",
        "clf.fit(traindat_df, trainlabs_df)  \n",
        "\n",
        "print(\"accuracy of MLP for training data is:\", score_train)\n",
        "print(\"accuracy of MLP for testing data is:\", score_test)"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "accuracy of MLP for training data is: 0.7775891341256367\n",
            "accuracy of MLP for testing data is: 0.804635761589404\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wTSfeqQnbLYR"
      },
      "source": [
        "Then print the coefficients of the logistic regression model. Again, we're seeing that the attributes Sex and Pclass are the best at determining the survival of the passenger. The entire logistic regression analysis does not perform significantly better than the three node decision tree."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vYh53kOFAwSK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "70c9824f-c9bc-4b51-b374-22163883261d"
      },
      "source": [
        "for i in range(len(feats)):\n",
        "  print(feats[i], clf.coef_[0][i])\n"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Pclass -0.7386515129825114\n",
            "Sex 2.3438605361219795\n",
            "Age -0.027059882877413056\n",
            "SibSp -0.31460627274022623\n",
            "Parch -0.203422984758532\n",
            "Fare -0.0036131392532260656\n",
            "Embarked S -0.27232766783510787\n",
            "Embarked C 0.0547001754372503\n",
            "Embarked Q 0.20151538666693572\n",
            "log_Fare 0.5833369341073777\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Naive Bayes"
      ],
      "metadata": {
        "id": "Yiajg73EYBl2"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "We'll try a Naive Bayes classifier just for fun."
      ],
      "metadata": {
        "id": "f5tw7vS3v1Oq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.naive_bayes import MultinomialNB\n",
        "\n",
        "clf = MultinomialNB()\n",
        "clf.fit(traindat_df, trainlabs_df)\n",
        "score = clf.score(traindat_df, trainlabs_df)\n",
        "score"
      ],
      "metadata": {
        "id": "70MN2Is8YDog",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "aecc1a8f-f5df-41fd-9dc2-e69a5418146d"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.6977928692699491"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Wrapping up: I like the decision tree best as a predictive model for classifying the survival of a passenger on the titanic. It retains the best parsimony: explaining as much of the data with as few variables/attributes as possible. With a simple decision tree, it would also be far less computationally demanding than other models. "
      ],
      "metadata": {
        "id": "_ursm4GPwPLl"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "0cBEb3fJwnyF"
      },
      "execution_count": 19,
      "outputs": []
    }
  ]
}
